------------------------------------CREATE TABLE--------------------------------
------------####location_table_creation####-----------------------
SET SERVEROUTPUT ON;
create or replace procedure location_creation is table_name varchar2(1000);  
BEGIN
-- table creation query
   table_name:='
   CREATE TABLE LOCATION(
   ZIP_CODE VARCHAR2(10), 
   CITY_NAME VARCHAR2(30) NOT NULL, 
   STATE_NAME VARCHAR2(20) NOT NULL,
   CONSTRAINT ZP_PK PRIMARY KEY(ZIP_CODE)
   )';
   
   EXECUTE IMMEDIATE table_name;
end location_creation;
/
create or replace procedure location_drop is table_name varchar2(1000);  
BEGIN
-- table creation query
   table_name:='drop table LOCATION cascade constraints PURGE';
   
   EXECUTE IMMEDIATE table_name;
end location_drop;
/

DECLARE
        tbl_name varchar2(50);
        cnt NUMBER;
    BEGIN
        tbl_name := 'LOCATION';
        SELECT count(*) into cnt FROM user_tables where table_name = tbl_name;
        IF(cnt > 0)
        THEN
                DBMS_OUTPUT.PUT_LINE('**********TABLE LOCATION ALREADY EXISTS***************');
                -- call to table drop stored procedure 
                BEGIN 
                    location_drop;
                    DBMS_OUTPUT.PUT_LINE('**********TABLE LOCATION DROPPED***************');
                    location_creation;
                    DBMS_OUTPUT.PUT_LINE('**********TABLE LOCATION CREATED******************');
                END; 
                dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
        ELSE
        -- call to table creation stored procedure 
            BEGIN 
             location_creation;
            END;    
        DBMS_OUTPUT.PUT_LINE('**************TABLE LOCATION CREATED******************');
        dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
        END IF;
        EXCEPTION 
          when no_data_found then
           dbms_output.put_line('****************Table does not exist**************'); 
           -- call to table creation stored procedure 
           BEGIN 
             location_creation;
             dbms_output.put_line('*******************Table LOCATION created successfully******************');
             dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
           END; 
            when others
                then
                dbms_output.put_line('********************Something went wrong********************');
                dbms_output.put_line(dbms_utility.format_error_stack);
dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
END;
/


------------####Volunteer_table_creation####-----------------------
SET SERVEROUTPUT ON;
create or replace procedure volunteer_creation is table_name varchar2(2000);  
BEGIN
-- table creation query
   table_name:='
   CREATE TABLE VOLUNTEER(
   V_ID NUMBER GENERATED BY DEFAULT AS IDENTITY(START WITH 101 INCREMENT BY 1), 
   V_FIRST_NAME VARCHAR2(20) NOT NULL, 
   V_LAST_NAME VARCHAR2(20) NOT NULL, 
   V_USERNAME VARCHAR2(20) UNIQUE NOT NULL,
   V_PWD VARCHAR2(20) NOT NULL, 
   V_MOBILE_NO VARCHAR2(20) UNIQUE NOT NULL, 
   V_ADDRESS VARCHAR2(30) NOT NULL, 
   ZIP_CODE VARCHAR2(10) NOT NULL, 
   V_ACTIVE VARCHAR2(20) NOT NULL, 
   V_AVAILABILITY VARCHAR2(20) NOT NULL, 
   V_DATE_REGISTRATION DATE DEFAULT SYSDATE NOT NULL,
   CONSTRAINT VID_PK PRIMARY KEY(V_ID),
   CONSTRAINT ZIPCODE_FK FOREIGN KEY (ZIP_CODE) REFERENCES LOCATION(ZIP_CODE),
   CONSTRAINT check_v_mobileno CHECK (V_MOBILE_NO BETWEEN 1111111111 AND 9999999999) ENABLE,
   CHECK(REGEXP_LIKE(V_FIRST_NAME,''^[A-Za-z0-9]{1,16}$'')),
   CHECK(REGEXP_LIKE(V_LAST_NAME,''^[A-Za-z0-9]{1,16}$'')),
   CHECK(REGEXP_LIKE(V_USERNAME,''^[A-Za-z0-9]{1,16}$''))
   )';
   
   EXECUTE IMMEDIATE table_name;
end volunteer_creation;
/

create or replace procedure volunteer_drop is table_name varchar2(1000);  
BEGIN
-- table creation query
   table_name:='drop table VOLUNTEER cascade constraints PURGE';
   
   EXECUTE IMMEDIATE table_name;
end volunteer_drop;
/


DECLARE
        tbl_name varchar2(50);
        cnt NUMBER;
    BEGIN
        tbl_name := 'VOLUNTEER';
        SELECT count(*) into cnt FROM user_tables where table_name = tbl_name;
        IF(cnt > 0)
        THEN
                DBMS_OUTPUT.PUT_LINE('**********TABLE VOLUNTEER ALREADY EXISTS***************');
                -- call to table drop stored procedure 
                BEGIN 
                    volunteer_drop;
                    DBMS_OUTPUT.PUT_LINE('**********TABLE VOLUNTEER DROPPED***************');
                    volunteer_creation;
                    DBMS_OUTPUT.PUT_LINE('**********TABLE VOLUNTEER CREATED******************');
                END; 
                dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');                dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
        ELSE
        -- call to table creation stored procedure 
            BEGIN 
             volunteer_creation;
            END;    
        DBMS_OUTPUT.PUT_LINE('**************TABLE VOLUNTEER CREATED******************');
        dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
        END IF;
        EXCEPTION 
          when no_data_found then
           dbms_output.put_line('****************Table does not exist**************'); 
           -- call to table creation stored procedure 
           BEGIN 
             volunteer_creation;
             dbms_output.put_line('*******************Table VOLUNTEER created successfully******************');
             dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
           END; 
            when others
                then
                dbms_output.put_line('********************Something went wrong********************');
                dbms_output.put_line(dbms_utility.format_error_stack);
dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
END;
/

----------------------------------------------####Recipient_table_creation--------------------------------------------------
SET SERVEROUTPUT ON;
create or replace procedure recipient_creation is table_name varchar2(2000);  
BEGIN
-- table creation query
   table_name:='
   create table Recipient(
   R_ID NUMBER GENERATED BY DEFAULT AS IDENTITY(START WITH 101 INCREMENT BY 1),
   R_Username varchar2(20) UNIQUE NOT NULL, 
   National_ID number UNIQUE NOT NULL, 
   R_Pwd varchar2(20)NOT NULL, 
   R_First_Name varchar2(20) NOT NULL,
   R_Last_Name varchar2(20) NOT NULL,
   R_Mobile_No varchar2(20) UNIQUE NOT NULL, 
   R_Address varchar2(50) NOT NULL, 
   Zip_Code VARCHAR2(10) NOT NULL, 
   R_Income varchar2(20) NOT NULL,
   R_DATE_REGISTRATION DATE NOT NULL,
   R_Approval_status NUMBER DEFAULT 0,
   CONSTRAINT R_ID_PK1 PRIMARY KEY(R_ID),
   CONSTRAINT ZP_PK1 FOREIGN KEY(ZIP_CODE) REFERENCES LOCATION(ZIP_CODE),
   CONSTRAINT check_nationalID CHECK (National_ID BETWEEN 111111111 AND 999999999) ENABLE,
   CONSTRAINT check_R_Mobile_No CHECK (R_Mobile_No BETWEEN 1111111111 AND 9999999999) ENABLE
   )';
   
   EXECUTE IMMEDIATE table_name;
end recipient_creation;
/

create or replace procedure recipient_drop is table_name varchar2(1000);  
BEGIN
-- table creation query
   table_name:='drop table RECIPIENT cascade constraints PURGE';
   
   EXECUTE IMMEDIATE table_name;
end recipient_drop;
/


DECLARE
        tbl_name varchar2(50);
        cnt NUMBER;
    BEGIN
        tbl_name := 'RECIPIENT';
        SELECT count(*) into cnt FROM user_tables where table_name = tbl_name;
        IF(cnt > 0)
        THEN
                DBMS_OUTPUT.PUT_LINE('**********TABLE RECIPIENT ALREADY EXISTS***************');
                -- call to table drop stored procedure 
                BEGIN 
                    recipient_drop;
                    DBMS_OUTPUT.PUT_LINE('**********TABLE RECIPIENT DROPPED***************');
                    recipient_creation;
                    DBMS_OUTPUT.PUT_LINE('**********TABLE RECIPIENT CREATED******************');
                END; 
                dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
        ELSE
        -- call to table creation stored procedure 
            BEGIN 
             recipient_creation;
            END;    
        DBMS_OUTPUT.PUT_LINE('**************TABLE RECIPIENT CREATED******************');
        dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
        END IF;
        EXCEPTION 
          when no_data_found then
           dbms_output.put_line('****************Table does not exist**************'); 
           -- call to table creation stored procedure 
           BEGIN 
             recipient_creation;
             dbms_output.put_line('*******************Table RECIPIENT created successfully******************');
             dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
           END; 
            when others
                then
                dbms_output.put_line('********************Something went wrong********************');
                dbms_output.put_line(dbms_utility.format_error_stack);
dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
END;
/

----------------------------------------####Food_Category_table_creation####--------------------------------------------------
SET SERVEROUTPUT ON;
create or replace procedure Food_Category_creation is table_name varchar2(1000);  
BEGIN
-- table creation query
   TABLE_NAME:='CREATE TABLE Food_Category(
                                        CAT_ID NUMBER GENERATED BY DEFAULT AS IDENTITY(START WITH 1 INCREMENT BY 1)  ,
                                        CATEGORY_NAME VARCHAR(25)UNIQUE NOT NULL,
                                        CATEGORY_DESC VARCHAR(100) NOT NULL,
                                        CONSTRAINT PK_Food_Category_ID PRIMARY KEY(CAT_ID)
                                        )';   
EXECUTE IMMEDIATE table_name;
end Food_Category_creation;
/

create or replace procedure food_category_drop is table_name varchar2(1000);  
BEGIN
-- table creation query
   table_name:='drop table FOOD_CATEGORY cascade constraints PURGE';
   
   EXECUTE IMMEDIATE table_name;
end food_category_drop;
/


DECLARE
        tbl_name varchar2(50);
        cnt NUMBER;
    BEGIN
        tbl_name := 'FOOD_CATEGORY';
        SELECT count(*) into cnt FROM user_tables where table_name = tbl_name;
        IF(cnt > 0)
        THEN
                DBMS_OUTPUT.PUT_LINE('**********TABLE FOOD_CATEGORY ALREADY EXISTS***************');
                -- call to table drop stored procedure 
                BEGIN 
                    food_category_drop;
                    DBMS_OUTPUT.PUT_LINE('**********TABLE FOOD_CATEGORY DROPPED***************');
                    Food_Category_creation;
                    DBMS_OUTPUT.PUT_LINE('**********TABLE FOOD_CATEGORY CREATED******************');
                END;
                dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
        ELSE
        -- call to table creation stored procedure
            BEGIN
             Food_Category_creation;
            END;    
        DBMS_OUTPUT.PUT_LINE('**************TABLE FOOD_CATEGORY CREATED******************');
        dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
        END IF;
        EXCEPTION
          when no_data_found then
           dbms_output.put_line('****************Table does not exist**************');
           -- call to table creation stored procedure
           BEGIN
             Food_Category_creation;
             dbms_output.put_line('*******************Table FOOD_CATEGORY created successfully******************');
             dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
           END;
            when others
                then
                dbms_output.put_line('********************Something went wrong********************');
                dbms_output.put_line(dbms_utility.format_error_stack);
dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
END;
/

------------####Donator_table_creation####-----------------------
SET SERVEROUTPUT ON;
create or replace procedure Donator_creation is table_name varchar2(2000);  
BEGIN
-- table creation query
   TABLE_NAME:='CREATE TABLE Donator(
                                        D_ID number GENERATED BY DEFAULT AS IDENTITY(START WITH 1 INCREMENT BY 1),
                                        D_Username varchar2(20) UNIQUE NOT NULL,
                                        D_Pwd varchar2(20) NOT NULL, 
                                        D_First_Name varchar2(20)NOT NULL,
                                        D_Last_Name varchar2(20) NOT NULL,
                                        D_Mobile_No varchar2(20)UNIQUE NOT NULL, 
                                        D_Address varchar2(30) NOT NULL, 
                                        Zip_Code VARCHAR2(10) NOT NULL, 
                                        D_Registration_Date date NOT NULL,
                                        CONSTRAINT PK_Donator_ID PRIMARY KEY(D_ID),
                                        CONSTRAINT FK_Donator_Zip FOREIGN KEY (Zip_Code) REFERENCES location(Zip_Code),
                                        CONSTRAINT check_d_mobileno CHECK (D_Mobile_No BETWEEN 1111111111 AND 9999999999) ENABLE,
                                        CHECK(REGEXP_LIKE(D_First_Name,''^[A-Za-z0-9]{1,16}$'')),
                                        CHECK(REGEXP_LIKE(D_Last_Name,''^[A-Za-z0-9]{1,16}$'')),
                                        CHECK(REGEXP_LIKE(D_Username,''^[A-Za-z0-9]{1,16}$''))
                                        )';   
EXECUTE IMMEDIATE table_name;
end Donator_creation;
/

create or replace procedure donator_drop is table_name varchar2(1000);  
BEGIN
-- table creation query
   table_name:='drop table DONATOR cascade constraints PURGE';
   
   EXECUTE IMMEDIATE table_name;
end donator_drop;
/

DECLARE
        tbl_name varchar2(50);
        cnt NUMBER;
    BEGIN
        tbl_name := 'DONATOR';
        SELECT count(*) into cnt FROM user_tables where table_name = tbl_name;
        IF(cnt > 0)
        THEN
                DBMS_OUTPUT.PUT_LINE('**********TABLE DONATOR ALREADY EXISTS***************');
                BEGIN 
                    donator_drop;
                    DBMS_OUTPUT.PUT_LINE('**********TABLE DONATOR DROPPED***************');
                    Donator_creation;
                    DBMS_OUTPUT.PUT_LINE('**********TABLE DONATOR CREATED******************');
                END;
                dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
        ELSE
        -- call to table creation stored procedure
            BEGIN
             Donator_creation;
            END;    
        DBMS_OUTPUT.PUT_LINE('**************TABLE DONATOR CREATED******************');
        dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
        END IF;
        EXCEPTION
          when no_data_found then
           dbms_output.put_line('****************Table does not exist**************');
           -- call to table creation stored procedure
           BEGIN
             Donator_creation;
             dbms_output.put_line('*******************Table DONATOR created successfully******************');
             dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
           END;
            when others
                then
                dbms_output.put_line('********************Something went wrong********************');
                dbms_output.put_line(dbms_utility.format_error_stack);
dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
END;
/

------------####donation_table_creation####-----------------------
SET SERVEROUTPUT ON;
create or replace PROCEDURE DONATION_CREATION IS TABLE_NAME VARCHAR2(1000);   
BEGIN
-- TABLE CREATION QUERY
   TABLE_NAME:='
   CREATE TABLE DONATION(
   DO_ID NUMBER GENERATED BY DEFAULT AS IDENTITY(START WITH 1 INCREMENT BY 1),
   D_ID NUMBER NOT NULL,
   DO_Date DATE NOT NULL,
   V_ID NUMBER,
   CONSTRAINT do_id_primarykey PRIMARY KEY(DO_ID),
   CONSTRAINT d_ID_fk FOREIGN KEY(D_ID) REFERENCES Donator(D_ID),
   CONSTRAINT v_ID_fk FOREIGN KEY(V_ID) REFERENCES VOLUNTEER(V_ID)ON DELETE SET NULL )';
   EXECUTE IMMEDIATE TABLE_NAME;
END DONATION_CREATION;
/

create or replace procedure donation_drop is table_name varchar2(1000);  
BEGIN
-- table creation query
   table_name:='drop table DONATION cascade constraints PURGE';
   
   EXECUTE IMMEDIATE table_name;
end donation_drop;
/

DECLARE
        tbl_name varchar2(50);
        cnt NUMBER;
    BEGIN
        tbl_name := 'DONATION';
        SELECT count(*) into cnt FROM user_tables where table_name = tbl_name;
        IF(cnt > 0)
        THEN
                DBMS_OUTPUT.PUT_LINE('******************TABLE DONATION ALREADY EXISTS******************');
                BEGIN 
                    donation_drop;
                    DBMS_OUTPUT.PUT_LINE('**********TABLE DONATION DROPPED***************');
                    DONATION_CREATION;
                    DBMS_OUTPUT.PUT_LINE('**********TABLE DONATION CREATED******************');
                END;
                dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
        ELSE
        -- call to table creation stored procedure 
            BEGIN 
             DONATION_CREATION;
            END;    
        DBMS_OUTPUT.PUT_LINE('******************TABLE DONATION CREATED******************');
        dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
        END IF;
        EXCEPTION 
          when no_data_found then
           dbms_output.put_line('******************Table does not exist!******************'); 
           -- call to table creation stored procedure 
           BEGIN 
             DONATION_CREATION;
             dbms_output.put_line('******************Table DONATION created successfully******************');
             dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
           END; 
            when others
                then
                dbms_output.put_line('OOPS Something went wrong!');
                dbms_output.put_line(dbms_utility.format_error_stack);
dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
END;
/




